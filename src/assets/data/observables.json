[
  {
    "name": "interval",
    "title": "Interval",
    "info": "El operador interval se ejecuta cada vez hasta el infinito o nos desuscribamos, el perido de tiempo que le hayamos asignado en este caso 1 segundo (1000 milisegundos)"
  },
  {
    "name": "timer",
    "title": "Timer",
    "info": "Este observable se ejecuta pasado el tiempo que le hemos asignado, en este caso 3 segundos."
  },
  {
    "name": "fromEvent",
    "title": "FromEvent",
    "info": "Clickea en la pagina y te muestra las coordenadas, es muy parecido a un listening pero en observable."
  },
  {
    "name": "map",
    "title": "Map",
    "info": "El operador Map aplica una función a cada valor, en este caso vamos a realizar una operacion matematica para mostrar el número al cuadrado de la lista 1,2,3,4,5."
  },
  {
    "name": "filter",
    "title": "Filter",
    "info": "Filtramos los números pares de una lista con 1,2,3,4,5 y nos suscribimos para mostrarlos."
  },
  {
    "name": "tap",
    "title": "Tap",
    "info": "El operador Tap sirve para ejecutar acciones colaterales, en caso de a ver un error lo mostraria. Cuando hagamos click nos mostrara el evento."
  },
  {
    "name": "share",
    "title": "Share",
    "info": "El operador Share sirve para ejecutar varias suscripciones a la vez. En este caso estamos ejecutando 4 suscripciones a la vez."
  },
  {
    "name": "concat",
    "title": "Concat",
    "info": "El operador Concat, concatena varios Observables y los ejecuta consecutivamente. Primero vamos a ejecutar un interval hasta 4 y despues ejecutamos un range del 1 al 10."
  },
  {
    "name": "nextErrorComplete",
    "title": "Next Error Complete",
    "info": "Vamos a ver como funciona una suscripción. Next, Error y Complete."
  },
  {
    "name": "bufferTime",
    "title": "BufferTime",
    "info": "El operador BufferTime, almacena durante el tiempo en milisegundos que le pasemos como parametro el observable con el que le llamamos. En este caso en interval de medio segundo que devulve un valor númerico, entonces el interval se ejecuta cada medio segundo y el bufferTimer cada 2 segundos mostrando el interval."
  },
  {
    "name": "switchMap",
    "title": "SwitchMap",
    "info": "El operador SwitchMap, cuando clickemos en la pagina va a volver empezar el observable y cuando volvamos a hacer click vuelve a empezar otra vez."
  },
  {
    "name": "forkJoin",
    "title": "ForkJoin",
    "info": "El operador ForkJoin, es un operador de convinacion y nos permite fusionarlas. Une todos los observables y lo ejecuta cuando todas las observables han terminado y en orden."
  },
  {
    "name": "concatMap",
    "title": "ConcatMap",
    "info": "El operador ConcatMap, vamos a recibir un of con tres valores 2000, 1000 y 3000 que se van a ejecutar en ese orden y en ese tiempo, la diferencia con Concat es que Concat concatena observables y ConcatMap concatena los datos de un observable y los procesa uno a uno."
  },
  {
    "name": "mergeMap",
    "title": "MergeMap",
    "info": "El operador MergeMap, es muy parecido a ConcatMap solo que MergeMap no los devuelve en orden si no cuando se emitan. Vamos a obtener los datos de varias llamadas a la API y nos lo va a devolver segun los vaya obteniendo."
  },
  {
    "name": "scan",
    "title": "Scan",
    "info": "El operador Scan, es un observable en el que podemos realizar comprobaciones o lo que necesitemos con los valores recibidos. En este caso sumaremos el primer valor con el segundo, los valores son: 1, 2, 3, 4 y 5."
  },
  {
    "name": "subject",
    "title": "Subject",
    "info": "El operador Subject, es un observable que puede tener multiples suscripciones. En este caso nos vamos a subcribir a dos suscripciones, una que nos muestre el valor y otra el valor + 100. Lo vamos a llamar dos veces con los valores de 1 y 2."
  },
  {
    "name": "multicast",
    "title": "Multicast en Subject",
    "info": "El operador Multicast, nos sirve para poder ejecutar varias suscripciones a la vez. En este caso vamos a obtener un ID y lo vamos a utilizar en las dos suscripciones, el Id que recibimos y en la otra ese Id menos 1. Hemos realizado una comprobacion de si el Id es 0 no muestre el negativo."
  }
]